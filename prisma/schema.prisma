// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?    
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  password      String?
  role          UserRole @default(ESTILISTA)
  roleId        String?  // Referencia a rol personalizado
  emailVerified DateTime?
  image         String?
  activo        Boolean  @default(true)
  ultimoAcceso  DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  citas        Cita[]
  auditLogs    AuditLog[]
  sessions     Session[]
  accounts     Account[]
  movimientos  MovimientoInventario[]
  roleCustom   Role?    @relation(fields: [roleId], references: [id])
  historialRegistros HistorialCliente[] @relation("HistorialUsuario")
  
  // Relaciones del sistema de pagos
  pagos        Pago[]   @relation("UsuarioPago")
  movimientosCaja MovimientoCaja[] @relation("UsuarioMovimiento")
  arqueosCaja  ArqueoCaja[] @relation("UsuarioArqueo")
  gastos       GastoOperativo[] @relation("UsuarioGasto")

  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  nombre      String   @unique
  descripcion String?
  color       String   @default("#6B7280") // Color para la UI
  icono       String   @default("üë§") // Emoji o clase de icono
  activo      Boolean  @default(true)
  permisos    Json     // JSON con permisos espec√≠ficos
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  usuarios User[]

  @@map("roles")
}

model Cliente {
  id                String      @id @default(cuid())
  nombre            String
  apellido          String
  telefono          String?
  email             String?
  direccion         String?
  
  // Caracter√≠sticas f√≠sicas del cabello
  tipoPelo          TipoPelo    @default(LISO)
  largoPelo         LargoPelo   @default(MEDIANO)
  colorOriginalPelo String?     // Color natural del cabello
  colorActualPelo   String?     // Color actual (despu√©s de tintes)
  texturaPelo       String?     // Grueso, fino, normal
  densidadPelo      String?     // Poco, normal, abundante
  
  // Informaci√≥n adicional
  redesSociales     String?
  fotos             String?
  alergias          String?     // Alergias conocidas
  preferencias      String?     // Preferencias del cliente
  notas             String?
  
  // Informaci√≥n bancaria y referencias
  cvu               String?     // CVU para Argentina
  cbu               String?     // CBU para Argentina
  alias             String?     // Alias bancario
  iban              String?     // IBAN para Europa
  cuentaBancaria    String?     // N√∫mero de cuenta gen√©rico
  banco             String?     // Nombre del banco
  
  activo            Boolean     @default(true)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  citas Cita[]
  historialCambios HistorialCliente[]
  pagos Pago[] @relation("ClientePago")

  @@map("clientes")
}

model HistorialCliente {
  id               String   @id @default(cuid())
  clienteId        String
  citaId           String?  // Referencia a la cita relacionada
  tipoRegistro     String   // SERVICIO, CAMBIO_FISICO, FOTO, NOTA
  titulo           String   // T√≠tulo del registro
  descripcion      String?  // Descripci√≥n detallada
  datosAntes       Json?    // Estado anterior (para cambios f√≠sicos)
  datosDespues     Json?    // Estado posterior (para cambios f√≠sicos)
  fotos            String?  // URLs de fotos relacionadas
  usuarioId        String?  // Quien realiz√≥ el registro
  createdAt        DateTime @default(now())

  cliente Cliente @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  cita    Cita?   @relation("HistorialCita", fields: [citaId], references: [id])
  usuario User?   @relation("HistorialUsuario", fields: [usuarioId], references: [id])

  @@map("historial_clientes")
}

model Cita {
  id              String    @id @default(cuid())
  clienteId       String
  usuarioId       String?
  servicioId      String?   // Referencia al servicio seleccionado
  promocionId     String?   // Promoci√≥n aplicada
  fecha           DateTime
  hora            String
  estado          EstadoCita @default(PENDIENTE)
  servicio        String?   // Texto libre (legacy)
  precio          Float?
  precioOriginal  Float?    // Precio antes de descuentos
  descuento       Float?    // Descuento aplicado
  notas           String?
  fotos           String?
  recordatorio    Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  cliente    Cliente    @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  usuario    User?      @relation(fields: [usuarioId], references: [id])
  servicioRef Servicio? @relation("ServicioCita", fields: [servicioId], references: [id])
  promocion  Promocion? @relation("PromocionCita", fields: [promocionId], references: [id])
  historialRegistros HistorialCliente[] @relation("HistorialCita")
  movimientos MovimientoInventario[]
  pago       Pago?      @relation("CitaPago")

  @@map("citas")
}

enum UserRole {
  ADMINISTRADOR
  ESTILISTA
}

enum TipoPelo {
  LISO
  RIZADO
  TE√ëIDO
  ONDULADO
  MIXTO
}

enum LargoPelo {
  RAPADO      // 0-5mm
  MUY_CORTO   // 5-15mm
  CORTO       // 15-50mm
  MEDIANO     // 50-150mm
  LARGO       // 150-300mm
  MUY_LARGO   // 300mm+
}

enum EstadoCita {
  PENDIENTE
  CONFIRMADA
  REALIZADA
  CANCELADA
  REAGENDADA
}

model Configuracion {
  id        String   @id @default(cuid())
  clave     String   @unique
  valor     String
  tipo      String   // 'string', 'number', 'boolean'
  categoria String   // 'general', 'moneda', 'notificaciones', etc.
  descripcion String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("configuraciones")
}

model AuditLog {
  id          String   @id @default(cuid())
  usuarioId   String?
  accion      String   // 'CREATE', 'UPDATE', 'DELETE'
  entidad     String   // 'Cliente', 'Cita', 'User', etc.
  entidadId   String   // ID del registro afectado
  datosAntes  String?  // JSON de los datos antes del cambio
  datosDespues String? // JSON de los datos despu√©s del cambio
  ip          String?
  userAgent   String?
  createdAt   DateTime @default(now())

  usuario User? @relation(fields: [usuarioId], references: [id])

  @@map("audit_logs")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Categoria {
  id          String   @id @default(cuid())
  nombre      String   @unique
  descripcion String?
  color       String?  // Color hex para la UI
  icono       String?  // Emoji o clase de icono
  activo      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  servicios Servicio[]
  productos Producto[]

  @@map("categorias")
}

model Servicio {
  id               String   @id @default(cuid())
  nombre           String
  descripcion      String?
  categoriaId      String
  precioBase       Float
  precioVenta      Float?   // Precio final con margen
  duracionMinutos  Int      @default(30)
  activo           Boolean  @default(true)
  requiereProductos Boolean @default(false)
  notas            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  categoria         Categoria @relation(fields: [categoriaId], references: [id])
  citas            Cita[]    @relation("ServicioCita")
  servicioProductos ServicioProducto[]
  promociones      PromocionServicio[]

  @@map("servicios")
}

model Producto {
  id            String   @id @default(cuid())
  nombre        String
  descripcion   String?
  categoriaId   String
  marca         String?
  codigo        String?  @unique
  precioCosto   Float
  precioVenta   Float
  stock         Int      @default(0)
  stockMinimo   Int      @default(5)
  unidadMedida  String   @default("unidad") // unidad, ml, gr, etc.
  activo        Boolean  @default(true)
  fechaVencimiento DateTime?
  proveedor     String?
  notas         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  categoria         Categoria @relation(fields: [categoriaId], references: [id])
  servicioProductos ServicioProducto[]
  movimientos      MovimientoInventario[]

  @@map("productos")
}

model ServicioProducto {
  id         String  @id @default(cuid())
  servicioId String
  productoId String
  cantidad   Float   @default(1)
  obligatorio Boolean @default(false)

  servicio Servicio @relation(fields: [servicioId], references: [id], onDelete: Cascade)
  producto Producto @relation(fields: [productoId], references: [id], onDelete: Cascade)

  @@unique([servicioId, productoId])
  @@map("servicio_productos")
}

model MovimientoInventario {
  id         String   @id @default(cuid())
  productoId String
  tipo       TipoMovimiento
  cantidad   Int
  motivo     String?
  usuarioId  String?
  citaId     String?   // Si el movimiento es por una cita
  createdAt  DateTime @default(now())

  producto Producto @relation(fields: [productoId], references: [id])
  usuario  User?    @relation(fields: [usuarioId], references: [id])
  cita     Cita?    @relation(fields: [citaId], references: [id])

  @@map("movimientos_inventario")
}

model Promocion {
  id           String   @id @default(cuid())
  nombre       String
  descripcion  String?
  tipo         TipoPromocion
  valor        Float    // Porcentaje o valor fijo
  fechaInicio  DateTime
  fechaFin     DateTime
  activo       Boolean  @default(true)
  usoMaximo    Int?     // M√°ximo de usos
  usoActual    Int      @default(0)
  condiciones  String?  // JSON con condiciones espec√≠ficas
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  servicios PromocionServicio[]
  citas     Cita[]            @relation("PromocionCita")

  @@map("promociones")
}

model PromocionServicio {
  id          String @id @default(cuid())
  promocionId String
  servicioId  String

  promocion Promocion @relation(fields: [promocionId], references: [id], onDelete: Cascade)
  servicio  Servicio  @relation(fields: [servicioId], references: [id], onDelete: Cascade)

  @@unique([promocionId, servicioId])
  @@map("promocion_servicios")
}

enum TipoMovimiento {
  ENTRADA
  SALIDA
  AJUSTE
  VENCIMIENTO
}

enum TipoPromocion {
  PORCENTAJE
  VALOR_FIJO
  DOS_POR_UNO
  DESCUENTO_SEGUNDA_UNIDAD
}

// Sistema de Cobros y Contabilidad
model Pago {
  id              String      @id @default(cuid())
  citaId          String      @unique // Un pago por cita
  clienteId       String      // Para consultas r√°pidas
  usuarioId       String?     // Quien proces√≥ el pago
  monto           Float       // Monto total pagado
  montoServicio   Float       // Monto del servicio
  propina         Float?      @default(0) // Propina adicional
  descuento       Float?      @default(0) // Descuento aplicado
  metodoPago      MetodoPago  @default(EFECTIVO)
  estadoPago      EstadoPago  @default(COMPLETADO)
  cuentaBancariaId String?    // Cuenta bancaria utilizada para transferencias
  referencia      String?     // N√∫mero de referencia/transacci√≥n
  notas           String?     // Notas del pago
  fechaPago       DateTime    @default(now())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  cita     Cita           @relation("CitaPago", fields: [citaId], references: [id], onDelete: Cascade)
  cliente  Cliente        @relation("ClientePago", fields: [clienteId], references: [id])
  usuario  User?          @relation("UsuarioPago", fields: [usuarioId], references: [id])
  cuentaBancaria CuentaBancaria? @relation("CuentaPago", fields: [cuentaBancariaId], references: [id])
  
  // Relaci√≥n con movimientos de caja
  movimientosCaja MovimientoCaja[]

  @@map("pagos")
}

model MovimientoCaja {
  id           String              @id @default(cuid())
  tipo         TipoMovimientoCaja  
  concepto     String              // Descripci√≥n del movimiento
  monto        Float           // Monto (positivo para ingresos, negativo para gastos)
  metodoPago   MetodoPago?     // Solo para ingresos de servicios
  pagoId       String?         // Si viene de un pago de servicio
  usuarioId    String?         // Quien registr√≥ el movimiento
  categoria    String?         // Categor√≠a del gasto/ingreso
  referencia   String?         // N√∫mero de referencia
  notas        String?         // Notas adicionales
  fecha        DateTime        @default(now())
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  pago    Pago? @relation(fields: [pagoId], references: [id])
  usuario User? @relation("UsuarioMovimiento", fields: [usuarioId], references: [id])

  @@map("movimientos_caja")
}

model ArqueoCaja {
  id                String   @id @default(cuid())
  fecha             DateTime // Fecha del arqueo
  usuarioId         String   // Quien hizo el arqueo
  saldoInicial      Float    // Saldo al inicio del d√≠a
  totalIngresos     Float    // Total de ingresos del d√≠a
  totalEgresos      Float    // Total de egresos del d√≠a
  saldoTeorico      Float    // Saldo que deber√≠a haber
  saldoReal         Float    // Saldo contado f√≠sicamente
  diferencia        Float    // Diferencia entre te√≥rico y real
  observaciones     String?  // Observaciones del arqueo
  
  // Desglose por m√©todo de pago
  efectivo          Float    @default(0)
  tarjetaCredito    Float    @default(0)
  tarjetaDebito     Float    @default(0)
  transferencia     Float    @default(0)
  otros             Float    @default(0)
  
  cerrado           Boolean  @default(false)
  fechaCierre       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  usuario User @relation("UsuarioArqueo", fields: [usuarioId], references: [id])

  @@unique([fecha, usuarioId])
  @@map("arqueos_caja")
}

model GastoOperativo {
  id          String   @id @default(cuid())
  concepto    String   // Descripci√≥n del gasto
  categoria   String   // Categor√≠a (Servicios, Suministros, Personal, etc.)
  monto       Float    // Monto del gasto
  metodoPago  MetodoPago @default(EFECTIVO)
  proveedor   String?  // Proveedor o beneficiario
  referencia  String?  // Factura, recibo, etc.
  usuarioId   String?  // Quien registr√≥ el gasto
  fecha       DateTime @default(now())
  notas       String?  // Notas adicionales
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  usuario User? @relation("UsuarioGasto", fields: [usuarioId], references: [id])

  @@map("gastos_operativos")
}

// Enums para el sistema de pagos
enum MetodoPago {
  EFECTIVO
  TARJETA_CREDITO
  TARJETA_DEBITO
  TRANSFERENCIA
  PAYPAL
  BIZUM
  OTROS
}

enum EstadoPago {
  PENDIENTE
  COMPLETADO
  CANCELADO
  REEMBOLSADO
}

enum TipoMovimientoCaja {
  INGRESO_SERVICIO
  INGRESO_PRODUCTO
  INGRESO_OTROS
  EGRESO_GASTO
  EGRESO_DEVOLUCION
  AJUSTE_POSITIVO
  AJUSTE_NEGATIVO
}

// Modelo para m√∫ltiples cuentas bancarias del negocio
model CuentaBancaria {
  id            String   @id @default(cuid())
  nombre        String   // Nombre descriptivo de la cuenta
  banco         String   // Nombre del banco
  titular       String   // Titular de la cuenta
  tipoCuenta    String   // CORRIENTE, AHORRO, etc.
  
  // Datos bancarios seg√∫n regi√≥n
  cvu           String?  // CVU para Argentina
  cbu           String?  // CBU para Argentina
  alias         String?  // Alias bancario
  iban          String?  // IBAN para Europa
  numeroCuenta  String?  // N√∫mero de cuenta gen√©rico
  codigoSwift   String?  // C√≥digo SWIFT internacional
  
  // Configuraci√≥n
  activa        Boolean  @default(true)
  predeterminada Boolean @default(false)
  moneda        String   @default("ARS") // ARS, EUR, USD, etc.
  notas         String?  // Observaciones
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relaciones
  pagos         Pago[]   @relation("CuentaPago")

  @@map("cuentas_bancarias")
}